export type str<T extends string> = string & { __brand: T };
export type ViewElement_t = {
    isLightOn: boolean,
    atomicNumber: number,
    symbol: string,
    image: string,
    groupNumber: Group_t
    period: Period_t,
    block: Block_t,
    classification: Classification_t,
    meltingPoint: number,
    boilingPoint: number,
    yearDiscovered: number,
}

export interface ApiResponse<T> {
    statusCode: number,
    message: string,
    data: T,
    error: string,
}

export interface PaginationMeta {
    current: number;        // Trang hiện tại
    pageSize: number;       // Số lượng mục trên mỗi trang
    totalPages: number;     // Tổng số trang
    totalItems: number;     // Tổng số mục
};

export interface PageResult<T> {
    meta: PaginationMeta
    result: T[]
}
export type DetailElement_t = {
    atomicNumber: number,
    symbol: string,
    image: string,
    groupNumber: string
    period: string,
    block: string,
    classification: Classification_t,
    name: string,
    atomicMass: string,
    electronicConfiguration: string,
    electronegativity: number,
    atomicRadius: number,
    ionRadius: number,
    vanDelWaalsRadius: number,
    ionizationEnergy: number,
    electronAffinity: number,
    oxidationStates: number[],
    standardState: string,
    bondingType: string,
    meltingPoint: number,
    boilingPoint: number,
    density: number,
    yearDiscovered: number
}

export type TabScreen_t = {
    icon: React.ReactNode,
    name: string,
    component: React.ReactNode,
}

export interface RegisterResponse {
    name: string,
    email: string,
    status: string
}

export interface RegisterRequest {
    name: string,
    email: string,
    password: string
}

export interface VerifyOTPResponse {
    email: string,
    verifyStatus: string,
}

export interface VerifyOTPRequest {
    email: string,
    otp: string,
}

export interface SendOTPRequest {
    email: string;
}

export interface LoginResponse {
    id: number,
    email: string,
    name: string,
    avatar: string,
    accessToken: string,
    role: string,
    isActive: boolean,
}

export interface LoginRequest {
    email: string,
    password: string
}

export interface ResetPasswordRequest {
    email: string,
    password: string,
    passwordConfirm: string,
    otp: string
}

export interface UpdateUserRequest {
    name: string,
    avatar: string
}

export interface ElementComment {
    id: number
    content: string
    likes: number
    elementName: string
    userName: string
    userAvatar: string
    createdAt: Date
    active: boolean
}

export interface PodcastComment {
    id: number
    content: string
    likes: number
    podcastTitle: string
    userName: string
    userAvatar: string
    createdAt: str<"date">
    active: boolean
}

export interface Podcast_t {
    id: string,
    title: string,
    audioUrl: string,
    transcript: string,
    element: string,
    active: boolean
}

export interface ProfileData {
    id: number
    name: string
    email: string
    avatar: string | null
    role: str<"role">
    active: boolean
}

export interface ViewedPodcast_t {
    title: string;
    elementName: string;
    lastSeen: string;
}

export interface ViewedElement_t {
    elementName: string;
    symbol: string;
    image: string;
    lastSeen: string;
}

export interface UserProfileElement {
    elementName: string;
    symbol: string;
    image: string;
    lastSeen: string;
}

export interface FavoritePodcast_t {
    title: string;
    elementName: string;
}

export interface FavoriteElement_t {
    elementName: string;
    symbol: string;
    image: string;
}

export type Classification_t = "-" | "kim loại" | "phi kim" | "trung tính";
export type Block_t = "-" | "s" | "p" | "d" | "f";
export type Group_t = "-" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "lan" | "act";
export type Period_t = "-" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "lan" | "act"

/************************************************************* */


export interface ToggleActiveResponse {
    id: number;
    active: boolean;
}

// Generic response for like operations
export interface LikeResponse {
    id: number;
    likes: number;
}

// Milestone Types (Inferred)
export interface Milestone_t {
    id: number;
    year: number;
    milestone: string;
    details: string;
    scientistName: string; // Assuming this maps from scientistId relationship
    active: boolean;
}
export interface CreateMilestoneRequest {
    year: number;
    milestone: string;
    details: string;
    scientistId: number;
}
export interface UpdateMilestoneRequest extends CreateMilestoneRequest { } // Often the same for PUT

// Scientist Types (Inferred)
export interface Scientist_t {
    id: number;
    name: string;
    birthYear?: number | null; // Optional based on typical data
    deathYear?: number | null; // Optional
    nationality: string;
    contribution: string;
    fact: string;
    active: boolean;
}
export interface CreateScientistRequest {
    name: string;
    birthYear?: number | null;
    deathYear?: number | null;
    nationality: string;
    contribution: string;
    fact: string;
    // birthBeforeDeath validation is likely backend logic, not part of request DTO usually
}
export interface UpdateScientistRequest extends CreateScientistRequest { }

// Discovery Types (Inferred)
export interface Discovery_t {
    id: number;
    scientistName: string; // Mapped from relationship
    elementName: string;   // Mapped from relationship
    elementSymbol: string; // Mapped from relationship
    discoveryYear: number;
    discoveryLocation: string;
    active: boolean;
}
export interface CreateDiscoveryRequest {
    scientistId: number;
    elementId: number;
    discoveryYear: number;
    discoveryLocation: string;
}
export interface UpdateDiscoveryRequest extends CreateDiscoveryRequest { }

// Element Types (Inferred Request types)
// DetailElement_t covers the response, but requests might be different
export interface CreateElementRequest {
    symbol: string;
    image: string;
    name: string;
    atomicNumber: number;
    groupNumber: string; // Consider specific Group_t? Swagger shows string
    period: string;      // Consider specific Period_t? Swagger shows string
    block: Block_t;      // Use Block_t from types-raw
    classification: Classification_t; // Use Classification_t
    meltingPoint?: number | null;
    boilingPoint?: number | null;
    atomicMass: string;
    density?: number | null;
    standardState: string; // Could be enum like 'SOLID', 'LIQUID', 'GAS'
    electronicConfiguration: string;
    electronegativity?: number | null;
    atomicRadius?: number | null;
    ionRadius?: string | null; // String because it can have +/-
    vanDelWaalsRadius?: number | null;
    ionizationEnergy?: number | null;
    electronAffinity?: number | null;
    bondingType?: string | null;
    yearDiscovered?: number | null;
    oxidationStates?: number[] | null;
}
export interface UpdateElementRequest extends CreateElementRequest { } // Often the same for PUT

// Comment Types (Inferred Request types)
export interface CreateElementCommentRequest {
    content: string;
    elementId: number;
}
export interface UpdateElementCommentRequest {
    content: string;
}
export interface CreatePodcastCommentRequest {
    content: string;
    podcastId: number;
}
export interface UpdatePodcastCommentRequest {
    content: string;
}

// User Controller Types (Inferred)
// Assuming ChangePasswordRequest structure
export interface ChangePasswordRequest {
    oldPassword?: string; // May not be needed if using OTP reset flow logic on backend
    password?: string; // Swagger doesn't specify, typical structure assumed
    passwordConfirm?: string;
    otp?: string; // If using OTP for this flow too
}
// Assuming UpdateUserRoleRequest structure
export interface UpdateUserRoleRequest {
    role: string; // Assuming role is passed as string e.g., "ADMIN", "USER"
}